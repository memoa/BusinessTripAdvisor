
@{
  ViewBag.Title = "Cities CRUD";
}

<h2>Cities CRUD</h2>

<!-- Cities Table -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#formModal" onclick="clearForm();">New city</button>
<table class="table">
  <thead>
    <tr>
      <th>Id</th>
      <th>Name</th>
      <th>Description</th>
      <th>Latitude</th>
      <th>Longitude</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody id="tableBody">
    <!-- Data will be added dynamically, on cities API call -->
    <!-- Loading Table Spinner -->
    <tr id="loadingTableSpinner">
      <td colspan="6">
        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
        Loading table...
      </td>
    </tr>
  </tbody>
</table>

<!-- City Form Modal -->
<div class="modal fade" id="formModal" tabindex="-1" role="dialog" aria-labelledby="formModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="formModalLabel">City form</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <!-- Form content -->
          <form id="form">
              <div class="form-group">
                  <label for="name">Name</label>
                  <input type="text" id="name" name="name" class="form-control" />
              </div>
              <div class="form-group">
                  <label for="description">Description</label>
                  <textarea rows="10" cols="80" type="textarea" id="description" name="description" class="form-control"></textarea>
              </div>
              <div class="form-group">
                  <label for="latitude">Latitude</label>
                  <input type="text" id="latitude" name="latitude" class="form-control" />
              </div>
              <div class="form-group">
                  <label for="longitude">Longitude</label>
                  <input type="text" id="longitude" name="longitude" class="form-control" />
              </div>
          </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="formSubmit()">Save changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Confirm Delete City Modal -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" role="dialog" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmDeleteModalLabel">Delete city</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this city?</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
        <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="deleteCity();">Yes</button>
      </div>
    </div>
  </div>
</div>

@section scripts {
@Scripts.Render("~/bundles/jqueryval")

<script>
  // Dynamic Cities Table Backend View - using bootstrap, jQuery and cities API
  // When document is ready, data about cities is taken from API and put in the table
  // Spinner is rotating while waiting for API to give data
  // If New city or Edit button is clicked, the modal form is shown
  // In form modal, Save changes button valdates and submits form
  // On exit from form modal all validation error messages will be cleared
  // In table, when delete button is clicked, confirm delete modal will be shown
  // and only if clicked on Yes button, record will be deleted

  // Global variables
  var id; // id of current record
  var validator; // container of validation rules, used to reset error messages after validation

  // Read all cities from database after creating page
  $(document).ready(function () {
    getCities(); // read all cities from API and put data in table

    // Client side validation rules
    validator = $("#form").validate({
      rules: {
        name: {
          required: true,
          maxlength: 50
        },
        description: {
          required: true,
          maxlength: 5000
        },
        latitude: {
          required: true,
          number: true
        },
        longitude: {
          required: true,
          number: true
        }
      }
    });
  });

  // READ : Get all cities from database using cities API, draw table in #body,
  //   fill rows and columns with data
  function getCities() {
    $("#loadingTableSpinner").show();
    // Get all cities, table draw in #body
    $.ajax({
      url: "/api/cities",
      method: "GET",
      success: function (responseData, textStatus, jqXHR) {
        $("#tableBody tr.record").remove();
        // Draw rows for each record in cities table, draw buttons edit and delete
        for (var i = 0; i < responseData.length; ++i) {
          var record = responseData[i];
            $("#tableBody").append(`<tr class="record"><td>${record.id}</td><td>${record.name}</td><td>${record.description}</td><td>${record.latitude}</td><td>${record.longitude}</td><td><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#formModal" onclick="fillForm(${record.id});">Edit</button></td><td><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#confirmDeleteModal" onclick="setId(${record.id});">Delete</button></td></tr>`);
        }
        $("#loadingTableSpinner").hide();
      },
      error: function (jqXHR, textStatus, errorThrown) {
        $("#loadingTableSpinner").hide();
        alert("Something wrong happend.");
      }
    });
  }

  // Clear data in form
  function clearForm() {
    id = null; // id is not set, for submitting new city
    $("#name").val("");
    $("#description").val("");
    $("#latitude").val("");
    $("#longitude").val("");
  }

  // Fill the form with data taken from API
  function fillForm(recordId) {
    id = recordId; // set current id, for submitting modified city
    // Read city record from database using cities API and fill the form
    $.ajax({
      url: "/api/cities/" + id,
      method: "GET",
      success: function (responseData, textStatus, jqXHR) {
        $("#name").val(responseData.name);
        $("#description").val(responseData.description);
        $("#latitude").val(responseData.latitude);
        $("#longitude").val(responseData.longitude);
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert("Something wrong happend.");
      }
    });
  }

  // Check if form is valid and update city data or create new city
  // If global variable id == null -> create new city
  // else, update city with id same as global variable id
  function formSubmit() {
    // If form is valid, send data to API
    if ($("#form").valid()) {
      $.ajax({
        url: "/api/cities/" + (id === null ? "" : id),
        method: id === null ? "POST" : "PUT",
        data: {
          name: $("#name").val(),
          description: $("#description").val(),
          latitude: $("#latitude").val(),
          longitude: $("#longitude").val()
        },
        success: function (responseData, textStatus, jqXHR) {
          getCities(); // read all cities from API and put data in table
        },
        error: function (jqXHR, textStatus, errorThrown) {
          alert("Something wrong happend.");
        }
      });
      $("#formModal").modal("hide");
    }
  }

  // Reset validation error messages in form after closing form modal
  $('#formModal').on('hide.bs.modal', function (e) {
    validator.resetForm();
  })

  // Set value for global variable id, used for delete city function, called from delete buttons
  // for each city in table
  function setId(newId) {
    id = newId;
  }

  // DELETE : Delete record in database using cities API
  function deleteCity() {
    $.ajax({
      url: "/api/cities/" + id,
      method: "DELETE",
      success: function (responseData, textStatus, jqXHR) {
        getCities();
      },
      error: function (jqXHR, textStatus, errorThrown) {
        alert("Something wrong happend.");
      }
    });
  }
</script>
}